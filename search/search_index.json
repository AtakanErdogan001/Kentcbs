{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to kentcbs","text":"<p>a python package for geospatial analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://atakanerdogan001.github.io/kentcbs</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate random numbers</li> </ul>"},{"location":"#tr","title":"TR","text":""},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#kentcbs.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>kentcbs/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n    import random\n    return random.random()\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/atakanerdogan001/kentcbs/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>kentcbs could always use more documentation, whether as part of the official kentcbs docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/atakanerdogan001/kentcbs/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up kentcbs for local development.</p> <ol> <li> <p>Fork the kentcbs repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/kentcbs.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv kentcbs\n$ cd kentcbs/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 kentcbs tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/atakanerdogan001/kentcbs/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install kentcbs, run this command in your terminal:</p> <pre><code>pip install kentcbs\n</code></pre> <p>This is the preferred method to install kentcbs, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install kentcbs from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/atakanerdogan001/kentcbs\n</code></pre>"},{"location":"kentcbs/","title":"kentcbs module","text":"<p>Main module.</p>"},{"location":"kentcbs/#kentcbs.kentcbs.generate_random_string","title":"<code>generate_random_string(length=10)</code>","text":"<p>Generate a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>Length of the random string. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Type Description <code>_type_</code> <p>Random string of the given length.</p> Source code in <code>kentcbs/kentcbs.py</code> <pre><code>def generate_random_string(length=10):\n    \"\"\"Generate a random string of a given length.\n\n    Args:\n        length (int, optional): Length of the random string. Defaults to 10.\n\n    Returns:\n        _type_: Random string of the given length.\n    \"\"\"    \n    # Define the pool of characters from which to choose\n    characters = string.ascii_letters + string.digits + string.punctuation  # Include letters (both cases), digits, and punctuation\n\n    # Generate the random string\n    random_string = ''.join(random.choice(characters) for _ in range(length))\n\n    return random_string\n</code></pre>"},{"location":"kentcbs/#kentcbs.kentcbs.lucky_number","title":"<code>lucky_number(length=3)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 3.</p> <code>3</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description.</p> Source code in <code>kentcbs/kentcbs.py</code> <pre><code>def lucky_number(length=3):\n    \"\"\"_summary_\n\n    Args:\n        length (int, optional): _description_. Defaults to 3.\n\n    Returns:\n        _type_: _description_.\n    \"\"\"    \n    number = random.randint(0, 10**length - 1)\n\n    return number\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use kentcbs in a project:</p> <pre><code>import kentcbs\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import folium\n</pre> import folium In\u00a0[2]: Copied! <pre>m = folium.Map(location=[45.5236, -122.6750])\n</pre> m = folium.Map(location=[45.5236, -122.6750]) In\u00a0[3]: Copied! <pre>m\n</pre> m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import kentcbs\n</pre> import kentcbs In\u00a0[2]: Copied! <pre>kentcbs.generate_random_string(10)\n</pre> kentcbs.generate_random_string(10) Out[2]: <pre>'tlgadKs/Pl'</pre> In\u00a0[3]: Copied! <pre>kentcbs.lucky_number(5)\n</pre> kentcbs.lucky_number(5) Out[3]: <pre>42606</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[2]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(38, 42),\n    zoom=4\n)\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.OpenTopoMap),     center=(38, 42),     zoom=4 ) m Out[2]: In\u00a0[3]: Copied! <pre>m.scroll_wheel_zoom\n</pre> m.scroll_wheel_zoom Out[3]: <pre>False</pre>"},{"location":"examples/kentcbs/","title":"Kentcbs","text":"In\u00a0[1]: Copied! <pre>import kentcbs\nfrom ipyleaflet import Map, Marker, MarkerCluster, Popup, SearchControl\n</pre> import kentcbs from ipyleaflet import Map, Marker, MarkerCluster, Popup, SearchControl  In\u00a0[2]: Copied! <pre>m = kentcbs.Map(center=[36,36],zoom=4)\nm\n</pre> m = kentcbs.Map(center=[36,36],zoom=4) m Out[2]: In\u00a0[3]: Copied! <pre>url =\"https://nominaim.openstreetmap.org/search?format=json&amp;q={s}\"\n</pre> url =\"https://nominaim.openstreetmap.org/search?format=json&amp;q={s}\" In\u00a0[4]: Copied! <pre>m = kentcbs.Map(center=[36,36],zoom=4)\nm.add_search_control(position='topleft', zoom=4, url=url)\nm\n</pre> m = kentcbs.Map(center=[36,36],zoom=4) m.add_search_control(position='topleft', zoom=4, url=url) m Out[4]: In\u00a0[17]: Copied! <pre>\n</pre> In\u00a0[5]: Copied! <pre>m.add_search_control(position='topleft', zoom=4, url=url)\n</pre> m.add_search_control(position='topleft', zoom=4, url=url) In\u00a0[6]: Copied! <pre>m = kentcbs.Map(zoom=3, center=[19.1646, 72.8493])\n\n\nm.add(SearchControl(\n  position=\"topleft\",\n  url='https://nominatim.openstreetmap.org/search?format=json&amp;q={s}',\n  zoom=5,\n))\n\nm\n</pre> m = kentcbs.Map(zoom=3, center=[19.1646, 72.8493])   m.add(SearchControl(   position=\"topleft\",   url='https://nominatim.openstreetmap.org/search?format=json&amp;q={s}',   zoom=5, ))  m Out[6]:"}]}